<beans default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx">

    <!--    &lt;!&ndash; 读取配置文件 &ndash;&gt;
        <bean id="configPropertiesForSpring"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>classpath:jPush.properties</value>
                </list>
            </property>
        </bean>-->
    <context:property-placeholder location="classpath:jPush.properties"/>

    <!-- 扫描注解：扫描base-package中的存在@Component @Controller@Service等注解，
  隐式地注册了注解解析器： AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor
 使用到其他注解 @Persistence、@Equired或其他自定义注解时，需要注册对应解析器 -->
    <context:component-scan base-package="com.chan">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    </context:component-scan>


    <bean class="cn.jpush.api.JPushClient" id="jPushClient">
        <constructor-arg type="java.lang.String" value="${jPush.masterSecret}"/>
        <constructor-arg type="java.lang.String" value="${jPush.appKey}"/>
    </bean>
    <bean id="transactionManager"/>
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method propagation="REQUIRED" name="insert*" rollback-for="java.lang.Throwable"
                       no-rollback-for="com.chan.common.SuccessThrowable"/>
            <tx:method propagation="REQUIRED" name="save*" rollback-for="java.lang.Throwable"
                       no-rollback-for="com.chan.common.SuccessThrowable"/>
            <tx:method propagation="REQUIRED" name="remove*" rollback-for="java.lang.Throwable"
                       no-rollback-for="com.chan.common.SuccessThrowable"/>
            <tx:method propagation="REQUIRED" name="delete*" rollback-for="java.lang.Throwable"
                       no-rollback-for="com.chan.common.SuccessThrowable"/>
            <tx:method propagation="REQUIRED" name="update*" rollback-for="java.lang.Throwable"
                       no-rollback-for="com.chan.common.SuccessThrowable"/>
            <tx:method read-only="true" name="get*"/>
            <tx:method read-only="true" name="list*"/>
            <tx:method read-only="true" name="count*"/>
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true" proxy-target-class="true">
        <aop:pointcut id="txPointcut" expression="
               execution(* com.chan.service..*.insert*(..))
            or execution(* com.chan.service..*.save*(..))
            or execution(* com.chan.service..*.remove*(..))
            or execution(* com.chan.service..*.delete*(..))
            or execution(* com.chan.service..*.update*(..))
            or execution(* com.chan.service..*.get*(..))
            or execution(* com.chan.service..*.list*(..))
            or execution(* com.chan.service..*.count*(..))"
        />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

</beans>